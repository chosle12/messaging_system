# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _database
else:
    import _database

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


database_types_none = _database.database_types_none
database_types_postgres = _database.database_types_postgres
class database_manager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _database.database_manager_swiginit(self, _database.new_database_manager())
    __swig_destroy__ = _database.delete_database_manager

    def set_mode(self, database_type):
        return _database.database_manager_set_mode(self, database_type)

    def database_type(self):
        return _database.database_manager_database_type(self)

    def connect(self, connect_string):
        return _database.database_manager_connect(self, connect_string)

    def create_query(self, query_string):
        return _database.database_manager_create_query(self, query_string)

    def insert_query(self, query_string):
        return _database.database_manager_insert_query(self, query_string)

    def update_query(self, query_string):
        return _database.database_manager_update_query(self, query_string)

    def delete_query(self, query_string):
        return _database.database_manager_delete_query(self, query_string)

    def select_query(self, query_string):
        return _database.database_manager_select_query(self, query_string)

    def disconnect(self):
        return _database.database_manager_disconnect(self)

    @staticmethod
    def handle():
        return _database.database_manager_handle()

# Register database_manager in _database:
_database.database_manager_swigregister(database_manager)

def database_manager_handle():
    return _database.database_manager_handle()

class postgres_manager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _database.postgres_manager_swiginit(self, _database.new_postgres_manager())
    __swig_destroy__ = _database.delete_postgres_manager

    def database_type(self):
        return _database.postgres_manager_database_type(self)

    def connect(self, connect_string):
        return _database.postgres_manager_connect(self, connect_string)

    def create_query(self, query_string):
        return _database.postgres_manager_create_query(self, query_string)

    def insert_query(self, query_string):
        return _database.postgres_manager_insert_query(self, query_string)

    def update_query(self, query_string):
        return _database.postgres_manager_update_query(self, query_string)

    def delete_query(self, query_string):
        return _database.postgres_manager_delete_query(self, query_string)

    def select_query(self, query_string):
        return _database.postgres_manager_select_query(self, query_string)

    def disconnect(self):
        return _database.postgres_manager_disconnect(self)

# Register postgres_manager in _database:
_database.postgres_manager_swigregister(postgres_manager)



